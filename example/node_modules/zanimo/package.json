{
  "name": "zanimo",
  "version": "0.0.9",
  "author": {
    "name": "Paul Panserrieu",
    "email": "paul@42loops.com"
  },
  "description": "Animation library based on CSS3 transitions and promises",
  "repository": {
    "type": "git",
    "url": "https://github.com/peutetre/Zanimo.git"
  },
  "keywords": [
    "animation",
    "transition",
    "promise",
    "browser"
  ],
  "dependencies": {
    "q": "0.9.7"
  },
  "devDependencies": {
    "grunt": "~0.4.0",
    "grunt-cli": "~0.1.6",
    "grunt-saucelabs": "~4.0.2",
    "grunt-contrib-connect": "~0.1.2",
    "grunt-contrib-watch": "~0.2.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "license": "MIT",
  "main": "dist/zanimo-0.0.9.js",
  "homepage": "http://zanimo.us",
  "readme": "# Zanimo.js - Promise based CSS3 transitions\n\nAllows chaining of transitions in a promise based way using Kris Kowal's [Q.js library](https://github.com/kriskowal/q).\n\nZanimo.js is licensed under the terms of the MIT License.\n\n## Targeted platforms\n\nZanimo targets the following platforms:\n\n* Safari\n* Firefox\n* Chrome\n* Internet Explorer 10\n\n## Install\n\nvia bower\n\n~~~ sh\nbower install zanimo\n~~~\n\nvia npm and browserify. [Example repo](https://github.com/peutetre/zanimo-npm-dummy-example)\n\n## Building\n\n[![Build Status](https://secure.travis-ci.org/peutetre/Zanimo.png?branch=Q)](http://travis-ci.org/peutetre/Zanimo)\n\n[![Dependency Status](https://gemnasium.com/peutetre/Zanimo.png)](https://gemnasium.com/peutetre/Zanimo)\n\n[![SauceLabs Status](https://saucelabs.com/browser-matrix/zanimo.svg)](https://saucelabs.com/u/zanimo)\n~~~ sh\n$ make\n~~~\n\n## Launch tests\n\n### phantomjs\nTo run tests in your shell, you need [phantomjs](http://code.google.com/p/phantomjs/wiki/Installation).\n\n~~~ sh\n$ make test\n~~~\n\nOr open [test/index.html](http://peutetre.github.com/Zanimo/test/index.html) in a web browser.\n\n### SauceLabs\n\nTo run tests via SauceLabs, you need to set up the following environment variables `SAUCE_USERNAME` and `SAUCE_ACCESS_KEY`\n\n~~~sh\n$ make sauce\n~~~\n\n## API\n\n### Zanimo(elt|promise[elt]) ➜  promise[elt]\n\nTakes a DOM element or a promise of a DOM element and returns a promise of the given element.\n\n~~~ javascript\nZanimo(myDomElement).then(function (elt) {\n    // do something with the DOM element\n}, function (reason) {\n    // do something when `myDOMElement` isn't a DOM element\n});\n~~~\n\n### Zanimo.transition(elt, property, value, duration, [timingFunction])  ➜  promise[elt]\n\nStarts a transition on the given DOM element and returns a promise.\nFor now Zanimo does not support hexadecimal color notation or 0px (just use 0) in the value argument.\n\n~~~ javascript\nZanimo\n    .transition(myDomElement, \"width\", \"200px\", 200, \"ease-in\")\n    .then(\n        function (domElt) { /* do something on success */ },\n        function (reason) { /* do something on error */ }\n    );\n~~~\n\n### Zanimo.transitionf(property, value, duration, [timingFunction])  ➜  ( function(elt) ➜  promise[elt] )\n\nEncapsulates `Zanimo.transition()` in a function. Useful to define reusable transitions.\n\n~~~ javascript\nvar widthTransition = Zanimo.transitionf(\"width\", \"200px\", 200, \"ease-in\"),\n    heightTransition = Zanimo.transitionf(\"height\", \"300px\", 200, \"ease-in\");\n\nZanimo(myDomElement)\n    .then(widthTransition)\n    .then(heightTransition);\n~~~\n\n### Zanimo.transform(elt, value, [overwrite])  ➜  promise[elt]\n\nApplies a css transform on the given DOM element.\n\n~~~ javascript\nZanimo\n    .transform(myDomElement, \"translate3d(200px, 200px, 0)\")\n    .then(function (domElt) { console.log(\"Done...\"); });\n~~~\n\n### Zanimo.transformf(value, [overwrite])  ➜  ( function(elt) ➜  promise[elt] )\n\nEncapsulates `Zanimo.transform()` in a function. Useful for chaining.\n\n~~~ javascript\nZanimo(myDomElt).then(Zanimo.transformf(\"scale(2)\", true));\n~~~\n\n### Zanimo.all(array[function(elt) ➜  promise[elt]])  ➜  (function(elt) ➜  promise[elt])\n\nHelps executing multiple transitions in the same step.\n\n~~~ javascript\nvar anim1 = Zanimo.transitionf(\"opacity\", 0.5, 200),\n    anim2 = Zanimo.transitionf(\"width\", \"400px\", 400);\n\nZanimo(myDomElt).then(Zanimo.all([anim1, anim2]));\n~~~\n\n### Zanimo.f(elt|promise[elt]) ➜  ( function(elt) ➜  promise[elt] )\n\nUseful for changing a given DOM element along a promises chain.\n\n~~~ javascript\nvar anim200pxLeft = Zanimo.transitionf(\"transform\", \"translate(200px, 0)\", 200);\n\nZanimo(myDomElement)\n    .then(anim200pxLeft)\n    .then(Zanimo.f(myOtherDomElement))\n    .then(anim200pxLeft)\n~~~\n\n## Credits\n\n[@bobylito](http://bobylito.me/) who came up with the name `Zanimo`.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/peutetre/Zanimo/issues"
  },
  "_id": "zanimo@0.0.9",
  "_from": "zanimo@0.0.x"
}
