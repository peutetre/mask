{
  "name": "zanimo",
  "version": "1.0.0",
  "author": {
    "name": "Paul Panserrieu",
    "email": "paul@42loops.com"
  },
  "description": "Animation library based on CSS3 transitions and promises",
  "repository": {
    "type": "git",
    "url": "https://github.com/peutetre/Zanimo.git"
  },
  "keywords": [
    "animation",
    "transition",
    "promise",
    "browser"
  ],
  "contributors": [
    {
      "name": "Gaétan Renaudeau",
      "email": "renaudeau.gaetan@gmail.com",
      "url": "http://greweb.me/"
    }
  ],
  "dependencies": {
    "q": "~1.0.0",
    "qanimationframe": "~2.0.1",
    "vendor-prefix": "~0.1.0"
  },
  "devDependencies": {
    "browserify": "3.19.1",
    "expect.js": "0.2.0",
    "mocha": "1.16.2",
    "mocha-as-promised": "2.0.0",
    "grunt": "0.4.2",
    "grunt-cli": "0.1.11",
    "grunt-saucelabs": "4.1.2",
    "grunt-contrib-connect": "0.6.0"
  },
  "scripts": {
    "test": "npm run build; grunt test",
    "build": "./node_modules/browserify/bin/cmd.js ./test/test.js -o ./test/main.js --debug;"
  },
  "license": "MIT",
  "main": "src/Zanimo.js",
  "homepage": "https://github.com/peutetre/Zanimo",
  "readme": "# Zanimo.js - Promise based CSS3 transitions [![Build Status](https://secure.travis-ci.org/peutetre/Zanimo.png?branch=Q)](http://travis-ci.org/peutetre/Zanimo) [![Dependency Status](https://gemnasium.com/peutetre/Zanimo.png)](https://gemnasium.com/peutetre/Zanimo)\n\n[![SauceLabs Status](https://saucelabs.com/browser-matrix/zanimo.svg)](https://saucelabs.com/u/zanimo)\n\nAllows chaining of css transitions in a promise based way, which gives a powerful control over CSS transitions\nfor making animations.\n\nZanimo.js is licensed under the terms of the MIT License.\n\n## Install\n\n```sh\n$ npm install zanimo\n```\n\n##  tests\n\nBuild tests with\n\n```\nnpm run build\n```\n\nand open [test/index.html](http://peutetre.github.com/Zanimo/test/index.html) in a web browser.\n\n## API\n\n### Zanimo(el|promise[el]) ➜  promise[el]\n\nTakes a DOM element or a promise of a DOM element and returns a promise of the given element.\n\n~~~ javascript\nZanimo(myDomElement).then(function (elt) {\n    // do something with the DOM element\n}, function (reason) {\n    // do something when `myDOMElement` isn't a DOM element\n});\n~~~\n\n\n### Zanimo(elt, property, value) ➜  promise[elt]\n\nApplies a css style on the given DOM element.\n\n~~~ javascript\nZanimo(myDomElement, \"transform\", \"translate3d(200px, 200px, 0)\")\n    .then(function (domElt) { console.log(\"Done...\"); });\n~~~\n\n\n### Zanimo(elt, property, value, duration, [timingFunction])  ➜  promise[elt]\n\nStarts a transition on the given DOM element and returns a promise.\nFor now Zanimo does not support hexadecimal color notation or 0px (just use 0) in the value argument.\n\n~~~ javascript\nZanimo(myDomElement, \"width\", \"200px\", 200, \"ease-in\")\n    .then(\n        function (domElt) { /* do something on success */ },\n        function (reason) { /* do something on error */ }\n    );\n~~~\n\n### Zanimo.f(*)  ➜  ( function(elt) ➜  promise[elt] )\n\nEncapsulates a `Zanimo(elt, *)` call by returning a function (elt)➜promise[elt].\n\nUseful to define reusable transitions.\n\n~~~ javascript\nvar widthTransition = Zanimo.f(\"width\", \"200px\", 200, \"ease-in\"),\n    heightTransition = Zanimo.f(\"height\", \"300px\", 200, \"ease-in\");\n\nZanimo(myDomElement)\n    .then(widthTransition)\n    .then(heightTransition);\n~~~\n\n## Credits\n\n[@bobylito](http://bobylito.me/) who came up with the name `Zanimo`.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/peutetre/Zanimo/issues"
  },
  "_id": "zanimo@1.0.0",
  "_from": "zanimo@1.0.x"
}
